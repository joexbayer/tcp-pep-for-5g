@misc{w3techs_operating_system_statistics,
  title = {{Operating System Statistics - W3Techs}},
  howpublished = {\url{https://w3techs.com/technologies/overview/operating_system}},
  note = {Accessed: April 26, 2024}
}

@inproceedings {295691,
author = {Gina Yuan and Matthew Sotoudeh and David K. Zhang and Michael Welzl and David Mazi{\`e}res and Keith Winstein},
title = {Sidekick: {In-Network} Assistance for Secure {End-to-End} Transport Protocols},
booktitle = {21st USENIX Symposium on Networked Systems Design and Implementation (NSDI 24)},
year = {2024},
isbn = {978-1-939133-39-7},
address = {Santa Clara, CA},
pages = {1813--1830},
url = {https://www.usenix.org/conference/nsdi24/presentation/yuan},
publisher = {USENIX Association},
month = apr
}

@INPROCEEDINGS{8999401,
  author={Tran, Viet-Hoang and Bonaventure, Olivier},
  booktitle={2019 IFIP Networking Conference (IFIP Networking)}, 
  title={Beyond socket options: making the linux TCP stack truly extensible}, 
  year={2019},
  volume={},
  number={},
  pages={1-9},
  keywords={Kernel;Linux;Band-pass filters;Protocols;Servers;Virtual machining;Sockets;TCP;protocol extension;eBPF;dynamic policy},
  doi={10.23919/IFIPNetworking46909.2019.8999401}}



@software{Ciko_PEP-DNA_A_Performance,
author = {Ciko, Kristjon},
title = {{PEP-DNA: A Performance Enhancing Proxy for Deploying Network Architectures}},
url = {https://github.com/kr1stj0n/pep-dna.git}
}

@misc{linuxkernel_neth,
  author = {{Linus Torvalds and The Linux Kernel Developers}},
  title = {Linux Kernel Source Code: include/linux/net.h},
  url = {https://github.com/torvalds/linux/blob/v6.7/include/linux/net.h#L155},
  version = {6.8},
  date = {2024-03-04},
  commit = {1ded5e5a5931bb8b31e15b63b655fe232e3416b2}
}

@misc{linuxkernel_code,
  author = {{The Linux Kernel Contributors}},
  title = {Filename and function from the Linux Kernel},
  howpublished = {\url{https://github.com/torvalds/linux/blob/v5.x/path/to/file.c}},
  year = {2024},
  note = {Accessed: 2024-04-22}
}

@inproceedings{middlebox_interactions, address={Taormina Sicily, Italy}, title={Measuring interactions between transport protocols and middleboxes}, ISBN={978-1-58113-821-4}, url={https://dl.acm.org/doi/10.1145/1028788.1028835}, DOI={10.1145/1028788.1028835}, booktitle={Proceedings of the 4th ACM SIGCOMM conference on Internet measurement}, publisher={ACM}, author={Medina, Alberto and Allman, Mark and Floyd, Sally}, year={2004}, month={Oct}, pages={336–341}, language={en}
}

@inproceedings{Srivastava_Fund_Panwar_2020, address={Toronto, ON, Canada}, title={An Experimental Evaluation of Low Latency Congestion Control for mmWave Links}, ISBN={978-1-72818-695-5}, url={https://ieeexplore.ieee.org/document/9162881/}, DOI={10.1109/INFOCOMWKSHPS50562.2020.9162881}, abstractNote={Applications that require extremely low latency are expected to be a major driver of 5G and WLAN networks that include millimeter wave (mmWave) links. However, mmWave links can experience frequent, sudden changes in link capacity due to obstructions in the signal path. These dramatic variations in link capacity cause a temporary “bufferbloat” condition during which delay may increase by a factor of 2-10. Low latency congestion control protocols, which manage bufferbloat by minimizing queue occupancy, represent a potential solution to this problem, however their behavior over links with dramatic variations in capacity is not well understood. In this paper, we explore the behavior of two major low latency congestion control protocols, TCP BBR and TCP Prague (as part of L4S), using link traces collected over mmWave links under various conditions. Our evaluation reveals potential problems associated with use of these congestion control protocols for low latency applications over mmWave links.}, booktitle={IEEE INFOCOM 2020 - IEEE Conference on Computer Communications Workshops (INFOCOM WKSHPS)}, publisher={IEEE}, author={Srivastava, Ashutosh and Fund, Fraida and Panwar, Shivendra S.}, year={2020}, month=jul, pages={352–357}, language={en} }

@misc{hingane2020aqm,
  title = {Using AQM to manage "temporary bufferbloat" on mmwave links},
  author = {Hingane, S.},
  year = {2020},
  howpublished = {Run my experiment on GENI blog},
  url = {https://witestlab.poly.edu/blog/aqm-mmwave/},
  note = {Accessed: 2024-02-13}
}

@ARTICLE{4623710,
  author={Ivanovich, Milosh and Bickerdike, Philip W. and Li, Jonathan C.},
  journal={IEEE Communications Magazine}, 
  title={On TCP performance enhancing proxies in a wireless environment}, 
  year={2008},
  volume={46},
  number={9},
  pages={76-83},
  keywords={Throughput;Wireless networks;Propagation losses;Internet;Cross layer design;Telecommunication traffic;Traffic control;Bandwidth;Delay effects;Wireless application protocol},
  doi={10.1109/MCOM.2008.4623710}}



@article{bandwidth_changes, title={Congestion control for sudden bandwidth changes in TCP}, volume={25}, ISSN={1099-1131}, DOI={10.1002/dac.1322}, abstractNote={In this paper, we propose a novel technique to deal with sudden bandwidth changes in transmission control protocol (TCP). In the current Internet, sudden bandwidth changes may occur because of vertical handovers between heterogeneous access networks, routing path changes, cognitive ratio, and multi-rate wireless local area network. The current implementation of TCP is designed and optimized for stable networks and does not adapt well upon sudden bandwidth changes. Consequently, it might suffer from packet losses in burst upon sudden bandwidth decrement and under-utilization upon sudden bandwidth increment. To resolve this problem, we propose to modify the current TCP algorithm to include a new phase, called fast adaptation (FA). The FA phase is triggered upon detecting sudden bandwidth changes, and a TCP sender in the FA phase attempts to recover lost packets quickly to avoid spurious timeouts upon sudden bandwidth decrement. Upon sudden bandwidth increment, it increases its window size drastically to realize full utilization. Through extensive simulations, experiments, and analysis, it is shown that the proposed scheme can effectively deal with sudden bandwidth changes. Copyright © 2011 John Wiley & Sons, Ltd.}, number={12}, journal={International Journal of Communication Systems}, author={Ko, Euiyul and An, Donghyeok and Yeom, Ikjun and Yoon, Hyunsoo}, year={2012}, pages={1550–1567}, language={en} }


 @misc{ibm_doc, rights={© Copyright IBM Corporation 2001, 2010}, url={https://www.ibm.com/docs/en/i/7.1?topic=communications-socket-programming}, abstractNote={IBM Documentation.}, year={2021}, month=aug, language={en-US} }
 
@book{top_down, address={Boston}, edition={Seventh edition}, title={Computer networking: a top-down approach}, ISBN={978-0-13-359414-0}, callNumber={TK5105.875.I57 K88 2017}, publisher={Pearson}, author={Kurose, James F. and Ross, Keith W.}, year={2017}, language={en}, pages={312-327} }

@misc{rahtz2023ultraping,
  author = {Rahtz, Matthew},
  title = {ultra\_ping: A high precision ping tool},
  year = {2023},
  howpublished = {\url{https://github.com/mrahtz/ultra_ping}},
  commit = {ae56836647239769f200a20630f30e7121af8369},
  note = {Accessed: 2023-11-07}
}

 @inproceedings{Agarwal_Krishnamurthy_Agarwal_2023, address={New York NY USA}, title={Host Congestion Control}, ISBN={9798400702365}, url={https://dl.acm.org/doi/10.1145/3603269.3604878}, DOI={10.1145/3603269.3604878}, abstractNote={The conventional wisdom in systems and networking communities is that congestion happens primarily within the network fabric. However, adoption of high-bandwidth access links and relatively stagnant technology trends for resources within hosts have led to emergence of host congestion—that is, congestion within the host network that enables data exchange between NIC and CPU/memory. Such host congestion alters the many assumptions entrenched within decades of research and practice of congestion control. We present hostCC, a congestion control architecture to handle both host and network fabric congestion. hostCC embodies three key ideas. First, in addition to congestion signals that originate within the network fabric, hostCC collects host congestion signals that capture the precise time, location, and reason for host congestion. Second, hostCC introduces a sub-RTT granularity host-local congestion response that uses congestion signals to allocate host resources between network traffic and host-local traffic. Finally, hostCC uses both host and network congestion signals to allocate network resources at an RTT granularity.}, booktitle={Proceedings of the ACM SIGCOMM 2023 Conference}, publisher={ACM}, author={Agarwal, Saksham and Krishnamurthy, Arvind and Agarwal, Rachit}, year={2023}, month=sep, pages={275–287}, language={en} }



 @article{aqm, title={Advances in Active Queue Management (AQM) Based TCP Congestion Control}, volume={25}, ISSN={1018-4864}, DOI={10.1023/B:TELS.0000014788.49773.70}, abstractNote={Current end-to-end Internet congestion control under tail-drop (TD) queue management experiences performance degradations such as multiple packet losses, high queueing delay and low link utilization. In this paper, we review recently proposed active queue management (AQM) algorithms for supporting end-to-end transmission control protocol (TCP) congestion control. We focus recently developed control theoretic design and analysis method for the AQM based TCP congestion control dynamics. In this context, we analyze the problems of existing AQM proposals in which congestion is detected and controlled reactively based on current and/or past congestion. Then we argue that AQM based TCP congestion control should be adaptive to the dynamically changing trafﬁc situation in order to detect, control and avoid the current and the incipient congestion proactively. Finally, we survey two adaptive and proactive AQM algorithms, PID-controller and Pro-Active Queue Management (PAQM), designed using classical proportional-integral–derivative (PID) feedback control to overcome the reactive congestion control dynamics of existing AQM algorithms. A comparative study of these AQM algorithms with existing AQM algorithms is given. A simulation study under a wide range of realistic trafﬁc conditions suggests that PIDcontroller and PAQM outperform other AQM algorithms such as random early detection (RED) [Floyd and Jacobson, 18] and proportional-integral (PI) controller [Hollot et al., 24].}, number={3/4}, journal={Telecommunication Systems}, author={Ryu, Seungwan and Rump, Christopher and Qiao, Chunming}, year={2004}, month=mar, language={en} }


 @article{aqm_survey, title={A survey of TCP-friendly router-based AQM schemes}, volume={27}, ISSN={01403664}, DOI={10.1016/j.comcom.2004.05.001}, abstractNote={Although the majority of the trafﬁc over the Internet is still TCP-based, applications such as voice over IP and video-conferencing are changing this very rapidly. While TCP-based applications react to network congestion, UDP-based streaming applications usually do not have any type of ﬂow and congestion control mechanisms. UDP, the transport layer protocol used by audio and video streaming applications, does not react to network congestion thus stealing bandwidth from the responsive TCP-based connections. Several solutions have been suggested to combat this TCP-friendliness problem, mostly applied either in the end systems (end-to-end) at the transport layer of the protocol stack or inside the network (routers) at the network layer. This article surveys the state-of-the-art in router-based mechanisms to address the TCP-friendliness problem and presents a description of the most important algorithms, design issues, advantages and disadvantages, and a performance evaluation. The article also describes ways to estimate the number of active ﬂows traversing a core router and points to further sources on this subject, which is widely used by many mechanisms, including several described in this survey.}, number={15}, journal={Computer Communications}, author={Chatranon, Gwyn and Labrador, Miguel A. and Banerjee, Sujata}, year={2004}, month=sep, language={en} }


@misc{rfc3135_pep,
    series =    {Request for Comments},
    number =    3135,
    howpublished =  {RFC 3135},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC3135},
    url =       {https://www.rfc-editor.org/info/rfc3135},
        author =    {Jim Griner and John Border and Markku Kojo and Zach D. Shelby and Gabriel Montenegro},
    title =     {{Performance Enhancing Proxies Intended to Mitigate Link-Related Degradations}},
    pagetotal = 45,
    year =      2001,
    month =     jun,
    abstract =  {This document is a survey of Performance Enhancing Proxies (PEPs) often employed to improve degraded TCP performance caused by characteristics of specific link environments, for example, in satellite, wireless WAN, and wireless LAN environments. This memo provides information for the Internet community.},
}


@ARTICLE{lkm,
  author={De Goyeneche, J.-M. and De Sousa, E.A.F.},
  journal={IEEE Software}, 
  title={Loadable kernel modules}, 
  year={1999},
  volume={16},
  number={1},
  pages={65-71},
  doi={10.1109/52.744571}}


 @inproceedings{tcp_extendable, address={Berlin Germany}, title={Is it still possible to extend TCP?}, ISBN={978-1-4503-1013-0}, url={https://dl.acm.org/doi/10.1145/2068816.2068834}, DOI={10.1145/2068816.2068834}, booktitle={Proceedings of the 2011 ACM SIGCOMM conference on Internet measurement conference}, publisher={ACM}, author={Honda, Michio and Nishida, Yoshifumi and Raiciu, Costin and Greenhalgh, Adam and Handley, Mark and Tokuda, Hideyuki}, year={2011}, month={Nov}, pages={181–194}, language={en} }


@book{c_programming_language,
author = {Kernighan, Brian W. and Ritchie, Dennis M.},
title = {The  C Programming Language},
year = {1988},
isbn = {0131103709},
publisher = {Prentice Hall Professional Technical Reference},
edition = {2nd},
abstract = {From the Publisher: This second editon describes C as defined by the ANSI standard. This book is meant to help the reader learn how to program in C. The book assumes some familiarity with basic programming concepts like variables, assignment statements, loops, and functions. A novice programmer should be able to read along and pick up the language. FEATURES: All examples have been tested, which is in machine-readable form. It discusses various aspects of C in more detail, although the emphasis is on examples of complete programs, rather than isolated fragments. It deals with basic data types, operators and expressions. Covers functions and program structure, external variables, scope rules, multiple source files, and also touches on the preprocessor. It also describes an interface between C programs and the UNIX operating system, concentrating on input/output, the file system, and storage allocation. It also provides a language reference manual. The official statement of the syntax and semantics of C is the ANSI standard.}
}

@misc{rfc8803,
    series =    {Request for Comments},
    number =    8803,
    howpublished =  {RFC 8803},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8803},
    url =       {https://www.rfc-editor.org/info/rfc8803},
        author =    {Olivier Bonaventure and Mohamed Boucadair and Sri Gundavelli and SungHoon Seo and Benjamin Hesmans},
    title =     {{0-RTT TCP Convert Protocol}},
    pagetotal = 47,
    year =      2020,
    month =     jul,
    abstract =  {This document specifies an application proxy, called Transport Converter, to assist the deployment of TCP extensions such as Multipath TCP. A Transport Converter may provide conversion service for one or more TCP extensions. The conversion service is provided by means of the 0-RTT TCP Convert Protocol (Convert). This protocol provides 0-RTT (Zero Round-Trip Time) conversion service since no extra delay is induced by the protocol compared to connections that are not proxied. Also, the Convert Protocol does not require any encapsulation (no tunnels whatsoever). This specification assumes an explicit model, where the Transport Converter is explicitly configured on hosts. As a sample applicability use case, this document specifies how the Convert Protocol applies for Multipath TCP.},
}

 @book{fq_codel_rfc, type={Request for Comments}, title={The Flow Queue CoDel Packet Scheduler and Active Queue Management Algorithm}, url={https://datatracker.ietf.org/doc/rfc8290}, DOI={10.17487/RFC8290}, abstractNote={This memo presents the FQ-CoDel hybrid packet scheduler and Active Queue Management (AQM) algorithm, a powerful tool for fighting bufferbloat and reducing latency. FQ-CoDel mixes packets from multiple flows and reduces the impact of head-of-line blocking from bursty traffic. It provides isolation for low-rate traffic such as DNS, web, and videoconferencing traffic. It improves utilisation across the networking fabric, especially for bidirectional traffic, by keeping queue lengths short, and it can be implemented in a memory- and CPU-efficient fashion across a wide range of hardware.}, number={RFC 8290}, institution={Internet Engineering Task Force}, author={Høiland-Jørgensen, Toke and McKenney, Paul and dave.taht@gmail.com and Gettys, Jim and Dumazet, Eric}, year={2018}, month={Jan} }


@INPROCEEDINGS{nextgen_proxy_servers,
  author={Wathsala, W. V. and Siddhisena, Buddhika and Athukorale, Ajantha S.},
  booktitle={2008 10th International Conference on Advanced Communication Technology}, 
  title={Next Generation Proxy Servers}, 
  year={2008},
  volume={3},
  number={},
  pages={2183-2187},
  doi={10.1109/ICACT.2008.4494223}
}


@INPROCEEDINGS{tcp_mmwave_proxy,
  author={Polese, Michele and Mezzavilla, Marco and Zhang, Menglei and Zhu, Jing and Rangan, Sundeep and Panwar, Shivendra and Zorzi, Michele},
  booktitle={2017 51st Asilomar Conference on Signals, Systems, and Computers}, 
  title={milliProxy: A TCP proxy architecture for 5G mmWave cellular systems}, 
  year={2017},
  volume={},
  number={},
  pages={951-957},
  doi={10.1109/ACSSC.2017.8335489}}

@misc{tcp_options,
    series =    {Request for Comments},
    number =    6691,
    howpublished =  {RFC 6691},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC6691},
    url =       {https://www.rfc-editor.org/info/rfc6691},
        author =    {David Borman},
    title =     {{TCP Options and Maximum Segment Size (MSS)}},
    pagetotal = 9,
    year =      2012,
    month =     jul,
    abstract =  {This memo discusses what value to use with the TCP Maximum Segment Size (MSS) option, and updates RFC 879 and RFC 2385. This document is not an Internet Standards Track specification; it is published for informational purposes.},
}

@INPROCEEDINGS{pep_dna,
  author={Ciko, Kristjon and Welzl, Michael and Teymoori, Peyman},
  booktitle={2021 IEEE 29th International Conference on Network Protocols (ICNP)}, 
  title={PEP-DNA: A Performance Enhancing Proxy for Deploying Network Architectures}, 
  year={2021},
  volume={},
  number={},
  pages={1-6},
  doi={10.1109/ICNP52444.2021.9651953}
}


@article{welzl_congestion,
author = {Welzl, Michael},
year = {2006},
month = {05},
pages = {1-263},
title = {Network Congestion Control: Managing Internet Traffic},
isbn = {9780470025284},
journal = {Network Congestion Control: Managing Internet Traffic},
doi = {10.1002/047002531X}
}

 @article{mmwave_blocking, title={Analysis of Blocking in mmWave Cellular Systems: Application to Relay Positioning}, volume={69}, ISSN={1558-0857}, DOI={10.1109/TCOMM.2020.3038177}, abstractNote={Within the framework of 5G, blockage effects occurring in the mmWave band are critical. Previous works describe the effects of blockages in isolated and multiple links for simple blocking objects, modeled with mathematical tools such as stochastic geometry and random shape theory. Our study uses these tools to characterize a scenario with N links, including the possible correlation among them in terms of blocking for several models of blocking objects. We include numerical evaluations highlighting that assuming independence among the links’ blocking elements is a too-brief simplification and does not accurately describe the real scenario. This paper also applies the formulation developed for the case of N links to optimize the relay positioning in mmWave cells for coverage enhancement, that is, to minimize the communication failure probability. We also show that both link budget and blockages affect the optimum positioning of the relays as they are both essential for successful transmission.}, number={2}, journal={IEEE Transactions on Communications}, author={Ruiz, Cristian García and Pascual-Iserte, Antonio and Muñoz, Olga}, year={2021}, month={Feb}, pages={1329–1342} }


 @inproceedings{Agrawal_Sharma_2016, title={5G millimeter wave (mmWave) communications}, abstractNote={5G communication system is attracting researches attention throughout the world for providing seamless user experience in 5G network which can accommodate large number of users in Internet of Things (IoT) environment with a gigabit-per-second (Gbps) data rate in mmWave communications with the consideration of Big-Data (BD). In 5G environment several billions of user devices will be connected seamlessly among each other in mmWave communications along with secure connections. 5G Millimeter Wave (mmWave) communications system proposes mmWave signal transmission along with low latency connection which will offer gigabit-per-second (Gbps) speed. This paper discusses 5G applications and services along with 5G vision and challenges. There are many challenges with the proposed mmWave communications system. 5G mmWave communications system will be revolutionizing for the users.}, booktitle={2016 3rd International Conference on Computing for Sustainable Global Development (INDIACom)}, author={Agrawal, S. K. and Sharma, Kapil}, year={2016}, month={Mar}, pages={3630–3634} }


@techreport{Eddy_2022, type={Request for Comments}, title={Transmission Control Protocol (TCP)}, url={https://datatracker.ietf.org/doc/rfc9293}, DOI={10.17487/RFC9293}, abstractNote={This document specifies the Transmission Control Protocol (TCP). TCP is an important transport-layer protocol in the Internet protocol stack, and it has continuously evolved over decades of use and growth of the Internet. Over this time, a number of changes have been made to TCP as it was specified in RFC 793, though these have only been documented in a piecemeal fashion. This document collects and brings those changes together with the protocol specification from RFC 793. This document obsoletes RFC 793, as well as RFCs 879, 2873, 6093, 6429, 6528, and 6691 that updated parts of RFC 793. It updates RFCs 1011 and 1122, and it should be considered as a replacement for the portions of those documents dealing with TCP requirements. It also updates RFC 5961 by adding a small clarification in reset handling while in the SYN-RECEIVED state. The TCP header control bits from RFC 793 have also been updated based on RFC 3168.}, number={RFC 9293}, institution={Internet Engineering Task Force}, author={Eddy, Wesley}, year={2022}, month={Aug} }

@misc{rfc6077,
    series =    {Request for Comments},
    number =    6077,
    howpublished =  {RFC 6077},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC6077},
    url =       {https://www.rfc-editor.org/info/rfc6077},
        author =    {Michael Welzl and Dimitri Papadimitriou and Bob Briscoe and Michael Scharf and Michael Welzl},
    title =     {{Open Research Issues in Internet Congestion Control}},
    pagetotal = 51,
    year =      2011,
    month =     feb,
    abstract =  {This document describes some of the open problems in Internet congestion control that are known today. This includes several new challenges that are becoming important as the network grows, as well as some issues that have been known for many years. These challenges are generally considered to be open research topics that may require more study or application of innovative techniques before Internet-scale solutions can be confidently engineered and deployed. This document is not an Internet Standards Track specification; it is published for informational purposes.},
}


@techreport{RFC5783,
  author = {M. Welzl and W. Eddy},
  title = {Congestion Control in the RFC Series},
  howpublished = {Internet Requests for Comments},
  type = {RFC},
  number = {5783},
  year = {2010},
  month = {February},
  issn = {2070-1721},
  publisher = {RFC Editor},
  institution = {RFC Editor},
  url = {https://www.rfc-editor.org/info/rfc5783},
  note = {\url{https://www.rfc-editor.org/info/rfc5783}},
}

@inproceedings{10.1145/2079296.2079317,
author = {Radhakrishnan, Sivasankar and Cheng, Yuchung and Chu, Jerry and Jain, Arvind and Raghavan, Barath},
title = {TCP Fast Open},
year = {2011},
isbn = {9781450310413},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2079296.2079317},
doi = {10.1145/2079296.2079317},
abstract = {Today's web services are dominated by TCP flows so short that they terminate a few round trips after handshaking; this handshake is a significant source of latency for such flows. In this paper we describe the design, implementation, and deployment of the TCP Fast Open protocol, a new mechanism that enables data exchange during TCP's initial handshake. In doing so, TCP Fast Open decreases application network latency by one full round-trip time, decreasing the delay experienced by such short TCP transfers.We address the security issues inherent in allowing data exchange during the three-way handshake, which we mitigate using a security token that verifies IP address ownership. We detail other fall-back defense mechanisms and address issues we faced with middleboxes, backwards compatibility for existing network stacks, and incremental deployment. Based on traffic analysis and network emulation, we show that TCP Fast Open would decrease HTTP transaction network latency by 15% and whole-page load time over 10% on average, and in some cases up to 40%.},
booktitle = {Proceedings of the Seventh COnference on Emerging Networking EXperiments and Technologies},
articleno = {21},
numpages = {12},
location = {Tokyo, Japan},
series = {CoNEXT '11}
}

@article{10.1145/52325.52356,
author = {Jacobson, V.},
title = {Congestion Avoidance and Control},
year = {1988},
issue_date = {August 1988},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0146-4833},
url = {https://doi.org/10.1145/52325.52356},
doi = {10.1145/52325.52356},
abstract = {In October of '86, the Internet had the first of what became a series of 'congestion collapses'. During this period, the data throughput from LBL to UC Berkeley (sites separated by 400 yards and three IMP hops) dropped from 32 Kbps to 40 bps. Mike Karels1 and I were fascinated by this sudden factor-of-thousand drop in bandwidth and embarked on an investigation of why things had gotten so bad. We wondered, in particular, if the 4.3BSD (Berkeley UNIX) TCP was mis-behaving or if it could be tuned to work better under abysmal network conditions. The answer to both of these questions was “yes”.Since that time, we have put seven new algorithms into the 4BSD TCP: round-trip-time variance estimationexponential retransmit timer backoffslow-startmore aggressive receiver ack policydynamic window sizing on congestionKarn's clamped retransmit backofffast retransmit Our measurements and the reports of beta testers suggest that the final product is fairly good at dealing with congested conditions on the Internet.This paper is a brief description of (i) - (v) and the rationale behind them. (vi) is an algorithm recently developed by Phil Karn of Bell Communications Research, described in [KP87]. (viii) is described in a soon-to-be-published RFC.Algorithms (i) - (v) spring from one observation: The flow on a TCP connection (or ISO TP-4 or Xerox NS SPP connection) should obey a 'conservation of packets' principle. And, if this principle were obeyed, congestion collapse would become the exception rather than the rule. Thus congestion control involves finding places that violate conservation and fixing them.By 'conservation of packets' I mean that for a connection 'in equilibrium', i.e., running stably with a full window of data in transit, the packet flow is what a physicist would call 'conservative': A new packet isn't put into the network until an old packet leaves. The physics of flow predicts that systems with this property should be robust in the face of congestion. Observation of the Internet suggests that it was not particularly robust. Why the discrepancy?There are only three ways for packet conservation to fail: The connection doesn't get to equilibrium, orA sender injects a new packet before an old packet has exited, orThe equilibrium can't be reached because of resource limits along the path. In the following sections, we treat each of these in turn.},
journal = {SIGCOMM Comput. Commun. Rev.},
month = {aug},
pages = {314–329},
numpages = {16}
}

  

@inproceedings{10.1145/52324.52356,
author = {Jacobson, V.},
title = {Congestion Avoidance and Control},
year = {1988},
isbn = {0897912799},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/52324.52356},
doi = {10.1145/52324.52356},
abstract = {In October of '86, the Internet had the first of what became a series of 'congestion collapses'. During this period, the data throughput from LBL to UC Berkeley (sites separated by 400 yards and three IMP hops) dropped from 32 Kbps to 40 bps. Mike Karels1 and I were fascinated by this sudden factor-of-thousand drop in bandwidth and embarked on an investigation of why things had gotten so bad. We wondered, in particular, if the 4.3BSD (Berkeley UNIX) TCP was mis-behaving or if it could be tuned to work better under abysmal network conditions. The answer to both of these questions was “yes”.Since that time, we have put seven new algorithms into the 4BSD TCP: round-trip-time variance estimationexponential retransmit timer backoffslow-startmore aggressive receiver ack policydynamic window sizing on congestionKarn's clamped retransmit backofffast retransmit Our measurements and the reports of beta testers suggest that the final product is fairly good at dealing with congested conditions on the Internet.This paper is a brief description of (i) - (v) and the rationale behind them. (vi) is an algorithm recently developed by Phil Karn of Bell Communications Research, described in [KP87]. (viii) is described in a soon-to-be-published RFC.Algorithms (i) - (v) spring from one observation: The flow on a TCP connection (or ISO TP-4 or Xerox NS SPP connection) should obey a 'conservation of packets' principle. And, if this principle were obeyed, congestion collapse would become the exception rather than the rule. Thus congestion control involves finding places that violate conservation and fixing them.By 'conservation of packets' I mean that for a connection 'in equilibrium', i.e., running stably with a full window of data in transit, the packet flow is what a physicist would call 'conservative': A new packet isn't put into the network until an old packet leaves. The physics of flow predicts that systems with this property should be robust in the face of congestion. Observation of the Internet suggests that it was not particularly robust. Why the discrepancy?There are only three ways for packet conservation to fail: The connection doesn't get to equilibrium, orA sender injects a new packet before an old packet has exited, orThe equilibrium can't be reached because of resource limits along the path. In the following sections, we treat each of these in turn.},
booktitle = {Symposium Proceedings on Communications Architectures and Protocols},
pages = {314–329},
numpages = {16},
location = {Stanford, California, USA},
series = {SIGCOMM '88}
}

@inproceedings{milliproxy, title={milliProxy: a TCP Proxy Architecture for 5G mmWave Cellular Systems}, url={http://arxiv.org/abs/1712.02700}, DOI={10.1109/ACSSC.2017.8335489}, abstractNote={TCP is the most widely used transport protocol in the internet. However, it offers suboptimal performance when operating over high bandwidth mmWave links. The main issues introduced by communications at such high frequencies are (i) the sensitivity to blockage and (ii) the high bandwidth fluctuations due to Line of Sight (LOS) to Non Line of Sight (NLOS) transitions and vice versa. In particular, TCP has an abstract view of the end-to-end connection, which does not properly capture the dynamics of the wireless mmWave link. The consequence is a suboptimal utilization of the available resources. In this paper we propose a TCP proxy architecture that improves the performance of TCP flows without any modification at the remote sender side. The proxy is installed in the Radio Access Network, and exploits information available at the gNB in order to maximize throughput and minimize latency.}, note={arXiv:1712.02700 [cs, math]}, booktitle={2017 51st Asilomar Conference on Signals, Systems, and Computers}, author={Polese, Michele and Mezzavilla, Marco and Zhang, Menglei and Zhu, Jing and Rangan, Sundeep and Panwar, Shivendra and Zorzi, Michele}, year={2017}, month=oct, pages={951–957} }


@inproceedings{snooptcp, address={Honolulu, HI, USA}, title={An experimental study of Snoop TCP performance over the IEEE 802.11b WLAN}, volume={3}, ISBN={978-0-7803-7442-3}, url={http://ieeexplore.ieee.org/document/1088342/}, DOI={10.1109/WPMC.2002.1088342}, abstractNote={The aim of this article is to compare,from an experimental point of view, the TCP performance achieved using the TCP Reno with SACK (Selective Acknowledgment) implementation, and that obtained using the Snoop TCP proxy-based approach over an IEEE 802.11b wireless LAN. This study has been carried out in the context of the UTNE (Wireless Internet Networks) project corresponding to the 5th framework of the European IST programme, addressed to enhance the performance of the TCP-UDP/IP protocol stack over wireless infrastructuressuch as IEEE 802.11, Bluetooth and HIPERLAN/2. The objective of this project is to develop a PEP (Performance Enhancing Proxy), named the WAL (Wireless Adaptation Layer), targeted at Internet protocols when they operate over wireless shared access LANs. The Snoop agent has been implementedas a module belonging to this layer.}, booktitle={The 5th International Symposium on Wireless Personal Multimedia Communications}, publisher={IEEE}, author={Garcia, M. and Choque, J. and Sanchez, L. and Munoz, L.}, year={2002}, pages={1068–1072}, language={en} }
