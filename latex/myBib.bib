@misc{rfc8803,
    series =    {Request for Comments},
    number =    8803,
    howpublished =  {RFC 8803},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8803},
    url =       {https://www.rfc-editor.org/info/rfc8803},
        author =    {Olivier Bonaventure and Mohamed Boucadair and Sri Gundavelli and SungHoon Seo and Benjamin Hesmans},
    title =     {{0-RTT TCP Convert Protocol}},
    pagetotal = 47,
    year =      2020,
    month =     jul,
    abstract =  {This document specifies an application proxy, called Transport Converter, to assist the deployment of TCP extensions such as Multipath TCP. A Transport Converter may provide conversion service for one or more TCP extensions. The conversion service is provided by means of the 0-RTT TCP Convert Protocol (Convert). This protocol provides 0-RTT (Zero Round-Trip Time) conversion service since no extra delay is induced by the protocol compared to connections that are not proxied. Also, the Convert Protocol does not require any encapsulation (no tunnels whatsoever). This specification assumes an explicit model, where the Transport Converter is explicitly configured on hosts. As a sample applicability use case, this document specifies how the Convert Protocol applies for Multipath TCP.},
}

 @inproceedings{Agrawal_Sharma_2016, title={5G millimeter wave (mmWave) communications}, abstractNote={5G communication system is attracting researches attention throughout the world for providing seamless user experience in 5G network which can accommodate large number of users in Internet of Things (IoT) environment with a gigabit-per-second (Gbps) data rate in mmWave communications with the consideration of Big-Data (BD). In 5G environment several billions of user devices will be connected seamlessly among each other in mmWave communications along with secure connections. 5G Millimeter Wave (mmWave) communications system proposes mmWave signal transmission along with low latency connection which will offer gigabit-per-second (Gbps) speed. This paper discusses 5G applications and services along with 5G vision and challenges. There are many challenges with the proposed mmWave communications system. 5G mmWave communications system will be revolutionizing for the users.}, booktitle={2016 3rd International Conference on Computing for Sustainable Global Development (INDIACom)}, author={Agrawal, S. K. and Sharma, Kapil}, year={2016}, month={Mar}, pages={3630–3634} }


@techreport{Eddy_2022, type={Request for Comments}, title={Transmission Control Protocol (TCP)}, url={https://datatracker.ietf.org/doc/rfc9293}, DOI={10.17487/RFC9293}, abstractNote={This document specifies the Transmission Control Protocol (TCP). TCP is an important transport-layer protocol in the Internet protocol stack, and it has continuously evolved over decades of use and growth of the Internet. Over this time, a number of changes have been made to TCP as it was specified in RFC 793, though these have only been documented in a piecemeal fashion. This document collects and brings those changes together with the protocol specification from RFC 793. This document obsoletes RFC 793, as well as RFCs 879, 2873, 6093, 6429, 6528, and 6691 that updated parts of RFC 793. It updates RFCs 1011 and 1122, and it should be considered as a replacement for the portions of those documents dealing with TCP requirements. It also updates RFC 5961 by adding a small clarification in reset handling while in the SYN-RECEIVED state. The TCP header control bits from RFC 793 have also been updated based on RFC 3168.}, number={RFC 9293}, institution={Internet Engineering Task Force}, author={Eddy, Wesley}, year={2022}, month={Aug} }


@techreport{RFC5783,
  author = {M. Welzl and W. Eddy},
  title = {Congestion Control in the RFC Series},
  howpublished = {Internet Requests for Comments},
  type = {RFC},
  number = {5783},
  year = {2010},
  month = {February},
  issn = {2070-1721},
  publisher = {RFC Editor},
  institution = {RFC Editor},
  url = {https://www.rfc-editor.org/info/rfc5783},
  note = {\url{https://www.rfc-editor.org/info/rfc5783}},
}

@inproceedings{10.1145/2079296.2079317,
author = {Radhakrishnan, Sivasankar and Cheng, Yuchung and Chu, Jerry and Jain, Arvind and Raghavan, Barath},
title = {TCP Fast Open},
year = {2011},
isbn = {9781450310413},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2079296.2079317},
doi = {10.1145/2079296.2079317},
abstract = {Today's web services are dominated by TCP flows so short that they terminate a few round trips after handshaking; this handshake is a significant source of latency for such flows. In this paper we describe the design, implementation, and deployment of the TCP Fast Open protocol, a new mechanism that enables data exchange during TCP's initial handshake. In doing so, TCP Fast Open decreases application network latency by one full round-trip time, decreasing the delay experienced by such short TCP transfers.We address the security issues inherent in allowing data exchange during the three-way handshake, which we mitigate using a security token that verifies IP address ownership. We detail other fall-back defense mechanisms and address issues we faced with middleboxes, backwards compatibility for existing network stacks, and incremental deployment. Based on traffic analysis and network emulation, we show that TCP Fast Open would decrease HTTP transaction network latency by 15% and whole-page load time over 10% on average, and in some cases up to 40%.},
booktitle = {Proceedings of the Seventh COnference on Emerging Networking EXperiments and Technologies},
articleno = {21},
numpages = {12},
location = {Tokyo, Japan},
series = {CoNEXT '11}
}

@article{10.1145/52325.52356,
author = {Jacobson, V.},
title = {Congestion Avoidance and Control},
year = {1988},
issue_date = {August 1988},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {18},
number = {4},
issn = {0146-4833},
url = {https://doi.org/10.1145/52325.52356},
doi = {10.1145/52325.52356},
abstract = {In October of '86, the Internet had the first of what became a series of 'congestion collapses'. During this period, the data throughput from LBL to UC Berkeley (sites separated by 400 yards and three IMP hops) dropped from 32 Kbps to 40 bps. Mike Karels1 and I were fascinated by this sudden factor-of-thousand drop in bandwidth and embarked on an investigation of why things had gotten so bad. We wondered, in particular, if the 4.3BSD (Berkeley UNIX) TCP was mis-behaving or if it could be tuned to work better under abysmal network conditions. The answer to both of these questions was “yes”.Since that time, we have put seven new algorithms into the 4BSD TCP: round-trip-time variance estimationexponential retransmit timer backoffslow-startmore aggressive receiver ack policydynamic window sizing on congestionKarn's clamped retransmit backofffast retransmit Our measurements and the reports of beta testers suggest that the final product is fairly good at dealing with congested conditions on the Internet.This paper is a brief description of (i) - (v) and the rationale behind them. (vi) is an algorithm recently developed by Phil Karn of Bell Communications Research, described in [KP87]. (viii) is described in a soon-to-be-published RFC.Algorithms (i) - (v) spring from one observation: The flow on a TCP connection (or ISO TP-4 or Xerox NS SPP connection) should obey a 'conservation of packets' principle. And, if this principle were obeyed, congestion collapse would become the exception rather than the rule. Thus congestion control involves finding places that violate conservation and fixing them.By 'conservation of packets' I mean that for a connection 'in equilibrium', i.e., running stably with a full window of data in transit, the packet flow is what a physicist would call 'conservative': A new packet isn't put into the network until an old packet leaves. The physics of flow predicts that systems with this property should be robust in the face of congestion. Observation of the Internet suggests that it was not particularly robust. Why the discrepancy?There are only three ways for packet conservation to fail: The connection doesn't get to equilibrium, orA sender injects a new packet before an old packet has exited, orThe equilibrium can't be reached because of resource limits along the path. In the following sections, we treat each of these in turn.},
journal = {SIGCOMM Comput. Commun. Rev.},
month = {aug},
pages = {314–329},
numpages = {16}
}

  

@inproceedings{10.1145/52324.52356,
author = {Jacobson, V.},
title = {Congestion Avoidance and Control},
year = {1988},
isbn = {0897912799},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/52324.52356},
doi = {10.1145/52324.52356},
abstract = {In October of '86, the Internet had the first of what became a series of 'congestion collapses'. During this period, the data throughput from LBL to UC Berkeley (sites separated by 400 yards and three IMP hops) dropped from 32 Kbps to 40 bps. Mike Karels1 and I were fascinated by this sudden factor-of-thousand drop in bandwidth and embarked on an investigation of why things had gotten so bad. We wondered, in particular, if the 4.3BSD (Berkeley UNIX) TCP was mis-behaving or if it could be tuned to work better under abysmal network conditions. The answer to both of these questions was “yes”.Since that time, we have put seven new algorithms into the 4BSD TCP: round-trip-time variance estimationexponential retransmit timer backoffslow-startmore aggressive receiver ack policydynamic window sizing on congestionKarn's clamped retransmit backofffast retransmit Our measurements and the reports of beta testers suggest that the final product is fairly good at dealing with congested conditions on the Internet.This paper is a brief description of (i) - (v) and the rationale behind them. (vi) is an algorithm recently developed by Phil Karn of Bell Communications Research, described in [KP87]. (viii) is described in a soon-to-be-published RFC.Algorithms (i) - (v) spring from one observation: The flow on a TCP connection (or ISO TP-4 or Xerox NS SPP connection) should obey a 'conservation of packets' principle. And, if this principle were obeyed, congestion collapse would become the exception rather than the rule. Thus congestion control involves finding places that violate conservation and fixing them.By 'conservation of packets' I mean that for a connection 'in equilibrium', i.e., running stably with a full window of data in transit, the packet flow is what a physicist would call 'conservative': A new packet isn't put into the network until an old packet leaves. The physics of flow predicts that systems with this property should be robust in the face of congestion. Observation of the Internet suggests that it was not particularly robust. Why the discrepancy?There are only three ways for packet conservation to fail: The connection doesn't get to equilibrium, orA sender injects a new packet before an old packet has exited, orThe equilibrium can't be reached because of resource limits along the path. In the following sections, we treat each of these in turn.},
booktitle = {Symposium Proceedings on Communications Architectures and Protocols},
pages = {314–329},
numpages = {16},
location = {Stanford, California, USA},
series = {SIGCOMM '88}
}

  

